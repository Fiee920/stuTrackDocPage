import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.BZiY0_qh.js";const g=JSON.parse('{"title":"前端部署","description":"","frontmatter":{},"headers":[],"relativePath":"article/deploy/frontend.md","filePath":"article/deploy/frontend.md"}'),l={name:"article/deploy/frontend.md"},e=n(`<h1 id="前端部署" tabindex="-1">前端部署 <a class="header-anchor" href="#前端部署" aria-label="Permalink to &quot;前端部署&quot;">​</a></h1><h2 id="_1-上传打包后的前端静态文件" tabindex="-1">1.上传打包后的前端静态文件 <a class="header-anchor" href="#_1-上传打包后的前端静态文件" aria-label="Permalink to &quot;1.上传打包后的前端静态文件&quot;">​</a></h2><p>将使用 Vite 打包后的前端静态文件，上传到 Nginx 安装目录下 的 html 文件夹当中。</p><h2 id="_2-修改nginx配置文件" tabindex="-1">2.修改Nginx配置文件 <a class="header-anchor" href="#_2-修改nginx配置文件" aria-label="Permalink to &quot;2.修改Nginx配置文件&quot;">​</a></h2><p>进入 Nginx 安装目录下的 conf 目录，使用 vim 编辑器打开 nginx.conf 文件，并进行如下配置：</p><ol><li><p>配置监听端口</p><ul><li><code>listen</code> 代表监听端口，默认 80。</li></ul></li><li><p>配置域名</p><ul><li><code>srver_name</code> 代表域名，根据实际情况配置。</li></ul></li><li><p>配置跨域</p><ul><li>在 <code>server_name</code> 的下一行追加以下内容：</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location /api { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proxy_pass {server_name}; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proxy_pass_request_headers on; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rewrite &quot;^/api/(.*)$&quot; /$1 break; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> location /stu/upload { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proxy_pass {server_name}; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proxy_pass_request_headers on; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rewrite &quot;^/api/(.*)$&quot; /$1 break; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> location /rec/upload { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proxy_pass {server_name}; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proxy_pass_request_headers on; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rewrite &quot;^/api/(.*)$&quot; /$1 break; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> location /rec2/upload { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proxy_pass {server_name}; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proxy_pass_request_headers on; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rewrite &quot;^/api/(.*)$&quot; /$1 break; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> location /files/upload { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proxy_pass {server_name}; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proxy_pass_request_headers on; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rewrite &quot;^/api/(.*)$&quot; /$1 break; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>注意，请将<code>{server_name}</code>替换为实际的域名，配置完成后需要 重启 Nginx 服务。</p></li><li><p>配置防火墙</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">查看已放行的端口</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list-all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#将 80 端口加入到防火墙放行白名单中，并重载防火墙 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=80/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --reload</span></span></code></pre></div></li><li><p>配置 Nginx 开机自启动</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/rc.local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">文本底部追加</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/usr/local/nginx/sbin/nginx</span></span></code></pre></div></li></ol><h2 id="_3-启动" tabindex="-1">3.启动 <a class="header-anchor" href="#_3-启动" aria-label="Permalink to &quot;3.启动&quot;">​</a></h2><p>按照平台部署要求配置好 Nginx 的 conf 配置文件和 html 目录 后，启动 Nginx 服务，前端即可启动。</p>`,8),p=[e];function t(h,r,k,o,E,d){return i(),a("div",null,p)}const y=s(l,[["render",t]]);export{g as __pageData,y as default};
